#!/bin/bash

# semver's Functions and Variables

# Vars
__cwd="$(pwd)"
prgroot="$HOME/.semver"

declare -A lists # For any lists your app may need as reference

# Config
__loadcfg() {
	local cfg="$prgroot/.cfg"
	# Write config variables below like so: name=$(cat "$cfg" | grep 'name' | cut -d '=' -f2)
}
# Config vars will be set via function in-case of needing reloaded
__loadcfg

# Funcs
__cfg() {
	local cfg="$prgroot/.cfg"
	while [[ -n "$1" ]]; do
		if [[ "$1" =~ '=' ]]; then
			local rule="$(echo "$1" | cut -d '=' -f1)"
			local oldvalue="$(cat "$cfg" | grep "$rule" | cut -d '=' -f2)"
			local newvalue="$(echo "$1" | cut -d '=' -f2)"
			sed -i -e "s/$rule=$oldvalue/$rule=$newvalue/" "$cfg"
			echo "Updated rule $rule from $oldvalue to $newvalue!"
		elif [[ "$1" == 'list' ]]; then
			echo "Current Settings:"
			cat "$cfg"
			return
		elif [[ "$1" == 'RESET' ]]; then
			__args --reset-cfg
		fi
		echo "Rule: $(cat "$cfg" | grep ^$1$ || echo "No Rule Found!")"
	shift; done
}
# Set app states in the following format:
# states[name]=""
declare -A states
states[cfg]="" # Any text within a bool state signifies true, less is better

# Add commands to the regex string below, separated by '|'
lists[cmds]='^(config|verbose|help|version)$'

__args() {
	# Process
	while [[ -n "$1" ]]; do
		case "${1,,}" in
			-C | --config )
				states[cfg]="t"
				;;
			-V | --verbose )
				VERBOSE=true
				;;
			-\? | --help ) # Not using -h to leave it open for other possible args
				cat "$prgroot/help"
				exit;;
			-v | --version )
				cat "$prgroot/version"
				exit;;
			* ) # Catch-all
				if [[ "$1" =~ ${lists[cmds]} ]]; then
					__cmds "$1"
				else
					cat "$prgroot/help" | head -1
					error "'$1' is not an argument!"
					exit
				fi
				;;
		esac
	shift; done
}
__cmds() {
	# process
	while [[ -n "$1" ]]; do
		case "${1,,}" in
			@(config) )
				states[cfg]="t"
				;;
			@(verbose) )
				VERBOSE=true
				;;
			@(help) ) # Not using -h to leave it open for other possible args
				cat "$prgroot/help"
				exit;;
			@(version) )
				cat "$prgroot/version"
				exit;;
			* ) # Catch-all
				if [[ "$1" =~ ^- ]]; then
					__args "$1"
				else
					cat "$prgroot/help" | head -1
					error "'$1' is not a command!"
					exit
				fi
				;;
		esac
	shift; done
}
error() { echo -e '\e[0;1;31m[ERROR]\e[0;0;0m '"$msg" >&2; }
verbose() { [[ $VERBOSE ]] && echo -e '\e[0;1;35m[VERBOSE]\e[0;0;0m '"$msg"; }
log() { echo -e '\e[0;1;32m[SEMVER]\e[0;0;0m '"$msg"; }
