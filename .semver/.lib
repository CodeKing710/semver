#!/usr/bin/env bash

# Vars
__cwd="$(pwd)"
prgroot="$HOME/.semver"

# Config
__loadcfg() {
	local cfg="$prgroot/.cfg"
	# Write config variables below like so: name=$(cat "$cfg" | grep 'name' | cut -d '=' -f2)
	vfilename="$(cat "$cfg" | grep 'vfile' | cut -d'=' -f2)"
	vfileloc="$(find ./ -maxdepth 2 -type f -name "$vfilename" 2>/dev/null | head -1)" # Just in case more than one version is found at depth 2
	vformat="$(cat "$cfg" | grep 'vformat' | cut -d'=' -f2)"
}
# Config vars will be set via function in-case of needing reloaded
__loadcfg

# Funcs
__cfg() {
	local cfg="$prgroot/.cfg"
	while [[ -n "$1" ]]; do
		if [[ "$1" =~ '=' ]]; then
			local rule="$(echo "$1" | cut -d '=' -f1)"
			local oldvalue="$(cat "$cfg" | grep "$rule" | cut -d '=' -f2)"
			local newvalue="$(echo "$1" | cut -d '=' -f2)"
			sed -i -e "s/$rule=$oldvalue/$rule=$newvalue/" "$cfg"
			echo "Updated rule $rule from $oldvalue to $newvalue!"
		elif [[ "$1" == 'list' ]]; then
			echo "Current Settings:"
			cat "$cfg"
			return
		elif [[ "$1" == 'RESET' ]]; then
			__args --reset-cfg
		fi
		echo "Rule: $(cat "$cfg" | grep ^"$1"$ || echo "No Rule Found!")"
	shift; done
}

if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
	declare -A states
	declare -A lists # For any lists your app may need as reference
	states[patch]="" # Any text within a bool state signifies true, less is better
	states[minor]=""
	states[major]=""
	states[stdin]=""

	lists[cmds]='^(patch|minor|major|repo|msg|config|verbose|help|version)$'
	lists[args]='^(-p|--patch|-m|--minor|-M|--major|-r|--repo|-g|--git-message|-C|--config|-V|--verbose|-?|--help|-v|--version)$'
else
	__patch=""
	__minor=""
	__major=""
	__stdin="" # Prevent overwrite of any vars called stdin
	cmds='^(patch|minor|major|repo|msg|config|verbose|help|version)$'
	args='^(-p|--patch|-m|--minor|-M|--major|-r|--repo|-g|--git-message|-C|--config|-V|--verbose|-?|--help|-v|--version)$'
fi

__args() {
	# Process
	[[ -z "$1" ]] && cat "$prgroot"/help | head -1 && exit
	while [[ -n "$1" ]]; do
		case "${1}" in
			-p | --patch )
				verbose "Patch version update"
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[patch]="t"
				else
					__patch="t"
				fi
				;;
			-m | --minor )
				verbose "Minor version update"
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[minor]="t"
				else
					__minor="t"
				fi
				;;
			-M | --major )
				verbose "Major version update"
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[major]="t"
				else
					__major="t"
				fi
				;;
			-r | --repo )
				shift; 
				[[ -z "$1" ]] && { error "Must supply a repo to target!"; exit; } || {
					[[ "${BASHVERSINFO[0]}" -ge 4 ]] && states[repo]="${1}" || __repo="${1}"
				}
				verbose "Targeting repo $([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[repo]}" || echo "${__repo}")"
				;;
			-g | --git-message )
				shift; 
				[[ -z "$1" ]] && states[msg]="Updated repo" || {
					[[ "${BASHVERSINFO[0]}" -ge 4 ]] && states[msg]="${1}" || __msg="${1}"
				}
				verbose "Commit message supplied!\n$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[msg]}" || echo "${__msg}")"
				;;
			-C | --config )
				verbose "Configure Settings chosen"
				shift; __cfg "$@"
				exit;;
			-V | --verbose )
				VERBOSE=true
				;;
			-\? | --help ) # Not using -h to leave it open for other possible args
				cat "$prgroot/help"
				exit;;
			-v | --version )
				cat "$prgroot/version"
				exit;;
			--reset-cfg )
        verbose "Resetting Semver to default configuration..."
        cp -rf "$repo/.semver" "$HOME/" && log "Semver has been reset!" || error "Failed to reset defaults!"
        exit;;
			@(--) )
				verbose "Reading stdin (pipe or redirect or as arg)"
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[stdin]="t"
				else
					__stdin="t"
				fi
				;;
			* )
				# Catch-all
				if [[ "$1" =~ $([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo ${lists[cmds]} || echo $cmds) ]]; then
					__cmds "$1"
					return 0
				else
					cat "$prgroot/help" | head -1
					verbose "Grepped arg: '$(echo "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${lists[args]}" || echo $args)" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "${1:--}")'"
					error "'$1' is not a argument!"
					error "Did you mean to use '$(echo "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${lists[args]}" || echo $args)" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "${1:--}")'?"
					exit
				fi
				;;
		esac
	shift; done
}
__cmds() {
	# process
	[[ -z "$1" ]] && cat "$prgroot"/help | head -1 && exit
	1="$(echo "$1" | tr '[:upper:]' '[:lower:]')" 2>/dev/null
	while [[ -n "$1" ]]; do
		case "${1}" in
			@(patch) )
				verbose "Patch version update"
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[patch]="t"
				else
					__patch="t"
				fi
				;;
			@(minor) )
				verbose "Minor version update"
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[minor]="t"
				else
					__minor="t"
				fi
				;;
			@(major) )
				verbose "Major version update"
				if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
					states[major]="t"
				else
					__major="t"
				fi
				;;
			@(repo) )
				shift; 
				[[ -z "$1" ]] && { error "Must supply a repo to target!"; exit; } || {
					[[ "${BASHVERSINFO[0]}" -ge 4 ]] && states[repo]="${1}" || __repo="${1}"
				}
				verbose "Targeting repo $([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[repo]}" || echo "${__repo}")"
				;;
			@(msg) )
				shift; 
				[[ -z "$1" ]] && states[msg]="Updated repo" || {
					[[ "${BASHVERSINFO[0]}" -ge 4 ]] && states[msg]="${1}" || __msg="${1}"
				}
				verbose "Commit message supplied!\n$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[msg]}" || echo "${__msg}")"
				;;
			@(config) )
				verbose "Configure Settings chosen"
				shift; __cfg "$@"
				exit;;
			@(verbose) )
				VERBOSE=true
				;;
			@(help) ) # Not using -h to leave it open for other possible args
				cat "$prgroot/help"
				exit;;
			@(version) )
				cat "$prgroot/version"
				exit;;
			* )
				# Catch-all
				if [[ "$1" =~ ^- ]]; then
					__args "$1"
					return 0
				else
					cat "$prgroot/help" | head -1
					verbose "Grepped command: '$(echo "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${lists[cmds]}" || echo $cmds)" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1")'"
					error "'$1' is not a command!"
					error "Did you mean to use '$(echo "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${lists[cmds]}" || echo $cmds)" | sed -e 's/\^\|[\(]\|[\)]\|\$//g' -e 's/[\|]/\n/g' | grep "$1")'?"
					exit
				fi
				;;
		esac
	shift; done
}
error() { printf '\e[0;1;31m[ERROR]\e[0;0;0m '"$1\n" >&2; }
verbose() { [[ -n "$VERBOSE" ]] && printf '\e[0;1;35m[VERBOSE]\e[0;0;0m '"$1\n"; }
log() { printf '\e[0;1;32m[SEMVER]\e[0;0;0m '"$1\n"; }

# Semver processing once states are collected
__proc() {
	# Bail-out one-liner
	[[ -z "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[patch]}" || echo "$__patch")" && -z "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[minor]}" || echo "$__minor")" && -z "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[major]}" || echo "$__major")" && -z "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[stdin]}" || echo "$__stdin")" ]] && { error "Must specify how to update the version!"; exit; }

	# Check for a target repo
	[[ -n "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[repo]}" || echo "$__repo")" ]] && {
		if [[ "${BASHVERSINFO[0]}" -ge 4 ]]; then
			states[repoloc]="$(find -type d -name "${states[repo]}" 2>/dev/null | head -1)"
			states[commit]='t'
		else
			__repoloc="$__repo"
			__commit="t"
		fi
		vfileloc="$(find "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[repoloc]}" || echo "$__repoloc")" -type f -name "$vfilename" 2>/dev/null | head -1)"
		verbose "New version file location: $vfileloc"
	}

	# Set the sed format
	# *=character
	# **=word
	# %=0-9
	# %%=>9
	# Version style resides between the square brackets
	local vsed="$(echo "$vformat" | cut -d'[' -f1 | sed -e 's/\./\\./g' -e 's/\(\*\*\)/#/g' -e 's/\*/\./g' -e 's/#/[\^\.]\*/g' -e 's/\(%%\)/#/g' -e 's/\(%\)/[[:digit:]]/g' -e 's/#/[\^[[:digit:]]]\*/g')"
	local vpsed="$(echo "$vformat" | cut -d'[' -f2 | sed -e 's/\./\\./g' -e 's/\]//g' -e 's/\(\*\*\)/#/g' -e 's/\*/\./g' -e 's/#/[\^\.]\*/g' -e 's/\(%%\)/#/g' -e 's/\(%\)/[[:digit:]]/g' -e 's/#/[[:digit:]]\*/g')"
	verbose "Version regex: $vsed"
	verbose "Version prefix regex: $vpsed"

	# Save the parts of the semver version file
	local vfile="$(cat "$vfileloc")"
	local vprefix="$(echo "${vfile//\n/}" | sed -e 's/'"$vpsed"'//')"
	local version="$(echo "${vfile//\n/}" | sed -e 's/'"^$vsed"'//')"
	local major="$(echo "$version" | cut -d. -f1)" minor="$(echo "$version" | cut -d. -f2)" patch="$(echo "$version" | cut -d. -f3)"
	verbose "Version file info: $vfile"
	verbose "Version prefix: $vprefix"
	verbose "Current Version: $version"
	verbose "Current Major iteration: $major"
	verbose "Current Minor iteration: $minor"
	verbose "Current Patch iteration: $patch"

	# Check the part(s) to update (MUST CHECK SEPARATELY SO MINOR AND PATCH DON'T GET OVERWRITTEN)
	if [[ -n "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[major]}" || echo "$__major")" ]]; then
		major=$((major + 1)); minor=0; patch=0
	fi
	if [[ -n "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[minor]}" || echo "$__minor")" ]]; then
		minor=$((minor + 1)); patch=0
	fi
	if [[ -n "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[patch]}" || echo "$__patch")" ]]; then
		patch=$((patch + 1))
	fi
	verbose "New Major iteration: $major"
	verbose "New Minor iteration: $minor"
	verbose "New Patch iteration: $patch"
	verbose "New Version file: $vprefix$major.$minor.$patch"

	# Push the changes to the file
	echo "$vprefix$major.$minor.$patch" > "$vfileloc"
	log "Version successfully updated!"
	
	# Check if the repo needs commited and pushed
	[[ -n "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[commit]}" || echo "$__commit")" ]] && {
		verbose "Commiting and pushing to source control..."
		cd "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[repoloc]}" || echo "$__repoloc")"
		git commit -a -m "$([[ "${BASHVERSINFO[0]}" -ge 4 ]] && echo "${states[msg]}" || echo "$__msg")" || { error "Unable to commit and sync repo!"; exit; }
		git push || { error "Unable to commit and sync repo!"; exit; }
		cd "$__cwd"
		log "Successfully synced repo!"
	}
}
