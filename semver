#!/usr/bin/env bash

# semver's main code

shopt -q -s extglob

autoupdate="$(cat $HOME/.semver/.cfg | grep -E ^au | cut -d '=' -f2)"
repo="$(find $HOME -type d -name "semver" 2>/dev/null | head -1)"

# Check for unit test
if [[ "$SEMVER_TST" == "true" ]]; then
	# Load the lib from the repo and set prgroot to repo
	echo -e "[SEMVER] UNIT TEST MODE! READING FROM REPO!"
	source "$repo"/.semver/.lib
	prgroot="$repo/.semver"
elif [[ "$autoupdate" == "true" ]]; then
	# Check for updates
	if [[ ! -e "$HOME/.semver" || -n "$(diff "$repo"/.semver/.lib "$HOME"/.semver/.lib)" || -n "$(diff "$repo"/.semver/help "$HOME"/.semver/help)" || -n "$(diff "$repo"/.semver/version "$HOME"/.semver/version)" || -n "$(diff "$repo"/semver "$HOME"/bin/semver)" ]]; then "$repo/install"; fi
	
	# Load lib
	source "$HOME"/.semver/.lib
else
	source "$HOME"/.semver/.lib
fi


__semver() {
	if [[ -z "$1" ]]; then
		__args # Any arg that doesn't exist in either function
	else
		if [[ "$1" =~ "-" ]]; then
			# Arg mode
			__args "$@"
		else
			# Command mode
			__cmds "$@"
		fi
	fi
	# Write your app's main flow here (General stub supports arg handling)
	__proc # States are set now, we can process the version update
}

__semver "$@"

# Cleanup for accidental sourcing
[[ $$ -eq $BASHPID ]] && { unset __semver __args __cwd autoupdate repo; shopt -q -u extglob; }
